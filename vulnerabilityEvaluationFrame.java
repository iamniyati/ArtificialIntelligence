import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

/**
 * This class evaluates the vulnerabilities in a system.
 * 
 *
 * @version   $Id$ 1.0 vulnerabilityEvaluationFrame.java
 *
 * @author   Aarti Gorade & Niyati Shah
 *
 * Revisions:
 *	$Log$
 */
public class vulnerabilityEvaluationFrame extends JFrame {

	private JPanel contentPane;
	public static boolean FileVaultOn;
	public static boolean portFullySecured;
	public static boolean wifiFullySecured;
	public static boolean applicationsFullySecured;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					vulnerabilityEvaluationFrame frame = new vulnerabilityEvaluationFrame();
					frame.setVisible(true);
				} catch (Exception e) {
					System.out
							.println("Exception occurred in vulnerabilityEvaluationFrame main frame");
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public vulnerabilityEvaluationFrame() {
		setFont(new Font("Dialog", Font.BOLD, 15));
		this.setTitle("Security Evaluation Expert System");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(600, 600);

		Toolkit t = Toolkit.getDefaultToolkit();
		Dimension d = t.getScreenSize();

		int x = (d.width / 2) - (getWidth() / 2);
		int y = (d.height / 2) - (getHeight() / 2);
		setBounds(x, y, 600, 600);

		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		contentPane.setBackground(Color.ORANGE);

		JLabel lblVulnerabilityEvalution = new JLabel(
				"Vulnerability Evaluation");
		lblVulnerabilityEvalution.setFont(new Font("Lucida Grande",
				Font.ITALIC, 20));
		lblVulnerabilityEvalution.setBounds(186, 21, 281, 29);
		contentPane.add(lblVulnerabilityEvalution);

		JButton btnDataProtection = new JButton("Data Protection");
		btnDataProtection.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				firstEvaluationPage.vulnerableEval = true;
				JOptionPane.showMessageDialog(contentPane,
						"Evaluation started. Please wait...");

				int score = evaluateEncryption();

				JOptionPane.showMessageDialog(contentPane,
						"Evaluation finished!!!");

				contentPane.setVisible(false);
				setVisible(false);
				feedbackFrame fbFrame = new feedbackFrame();
				fbFrame.setVisible(true);

				fbFrame.lblNewLabel.setText("Your Data protection score is "
						+ score + " out of 10");
				fbFrame.progressBar.setValue(score);
				if (score < 10) {
					fbFrame.textArea
							.setText("Your system do not have sufficient data encryption configuration.\n\nTo improve Data protection of your system, You should enable data encrption using FileVault facility.\nMake sure Encryption Status is Locked, Conversion Status is Complete, Has Encrypted Extents, Fully Secure and Passphrase Required");
				} else {
					fbFrame.textArea
							.setText("Excellent!!! \nYour system's data is very well encrypted and non-vulnerable!");
				}

			}
		});
		btnDataProtection.setBounds(77, 359, 172, 29);
		contentPane.add(btnDataProtection);

		// Action event for button - Security of  Ports
		JButton btnSecurityOfPorts = new JButton("Security of Ports");
		btnSecurityOfPorts.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				firstEvaluationPage.vulnerableEval = true;
				JOptionPane.showMessageDialog(contentPane,
						"Evaluation started. Please wait...");

				int score = evaluatePorts();
				if (score == 10) {
					portFullySecured = true;
				}

				JOptionPane.showMessageDialog(contentPane,
						"Evaluation finished!!!");

				contentPane.setVisible(false);
				setVisible(false);
				feedbackFrame fbFrame = new feedbackFrame();
				fbFrame.setVisible(true);

				fbFrame.lblNewLabel.setText("Your port security score is "
						+ score + " out of 10");
				fbFrame.progressBar.setValue(score);
				if (score < 10) {
					fbFrame.textArea
							.setText("Your system has few OPEN ports.\n\nTo improve security of Ports, avoid open ports listening for TCP incoming unnecessary connections");
				} else {
					fbFrame.textArea
							.setText("Excellent!!! \nYour Port security is high!");
				}

			}
		});
		btnSecurityOfPorts.setBounds(77, 414, 172, 29);
		contentPane.add(btnSecurityOfPorts);

		// Action event for button - Open Wifi Connections
		JButton btnOpenWifiConnections = new JButton("Open Wifi connections");
		btnOpenWifiConnections.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				firstEvaluationPage.vulnerableEval = true;
				JOptionPane.showMessageDialog(contentPane,
						"Evaluation started. Please wait...");

				int score = evaluateWIFI();
				if (score == 10) {
					wifiFullySecured = true;
				}

				JOptionPane.showMessageDialog(contentPane,
						"Evaluation finished!!!");

				contentPane.setVisible(false);
				setVisible(false);
				feedbackFrame fbFrame = new feedbackFrame();
				fbFrame.setVisible(true);

				fbFrame.lblNewLabel
						.setText("Your WIFI connection's security score is "
								+ score + " out of 10");
				fbFrame.progressBar.setValue(score);
				if (score < 10) {
					fbFrame.textArea
							.setText("Your system is vulnerable to Open WIFI networks which requires no authentication\n\nTo improve security of WIFI connections,Avoid connecting to OPEN WIFI networks. Connect to WIFI network which has authentication technique(WAP, WAP2)");
				} else {
					fbFrame.textArea
							.setText("Excellent!!! \nYour WIFI connections are secured!");
				}

			}
		});
		btnOpenWifiConnections.setBounds(347, 359, 172, 29);
		contentPane.add(btnOpenWifiConnections);

		// Action event for button - Insecure Applications
		JButton btnInsecureApplications = new JButton("Insecure Applications");
		btnInsecureApplications.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				firstEvaluationPage.vulnerableEval = true;
				JOptionPane.showMessageDialog(contentPane,
						"Evaluation started. Please wait...");

				int score = evaluateInstalledApplications();
				if (score == 10) {
					applicationsFullySecured = true;
				}

				JOptionPane.showMessageDialog(contentPane,
						"Evaluation finished!!!");

				contentPane.setVisible(false);
				setVisible(false);
				feedbackFrame fbFrame = new feedbackFrame();
				fbFrame.setVisible(true);

				fbFrame.lblNewLabel
						.setText("Your Installed Applications security score is "
								+ score + " out of 10");
				fbFrame.progressBar.setValue(score);
				if (score < 10) {
					fbFrame.textArea
							.setText("Your system has some applications installed from untrustworthy source.\n\nTo improve security of system, Ensure source of applications should be known and trustworthy. Uninstall vulnerable applications and install new applications from trustworthy source");
				} else {
					fbFrame.textArea
							.setText("Excellent!!! \nYour system's all installed applications are from trustworthy source!");
				}

			}
		});
		btnInsecureApplications.setBounds(347, 414, 172, 29);
		contentPane.add(btnInsecureApplications);

		// Action event for button - overall
		JButton btnOverall = new JButton("Overall");
		btnOverall.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				firstEvaluationPage.vulnerableEval = true;
				JOptionPane.showMessageDialog(contentPane,
						"Evaluation started. Please wait...");
				// Calculate all the vulnerability aspects of the system
				int scoreApps = evaluateInstalledApplications();
				int scorePort = evaluatePorts();
				int scoreWIFI = evaluateWIFI();
				int scoreEncryption = evaluateEncryption();

				// Calucate the final score of the aspects
				int score = (scoreApps + scorePort + scoreWIFI + scoreEncryption) / 4;

				JOptionPane.showMessageDialog(contentPane,
						"Evaluation finished!!!");

				contentPane.setVisible(false);
				setVisible(false);

				// Display the final score of the aspects
				if (score < 10) {
					mainScoreFrame.scoreGlobal = score;
					mainScoreFrame entireFb = new mainScoreFrame();
					entireFb.setVisible(true);
					entireFb.lblNewLabel
							.setText("Overall Vulnerability evaluation score is "
									+ score + " out of 10");
					entireFb.progressBar.setValue(score);

					System.out.println("mainScoreFrame.scoreGlobal = "
							+ mainScoreFrame.scoreGlobal);
				} else {
					feedbackFrame fbFrame = new feedbackFrame();
					fbFrame.setVisible(true);
					fbFrame.textArea
							.setText("Excellent!!! \nYour system is protected against vulnerability!");
				}

			}

		});
		btnOverall.setBounds(222, 307, 138, 29);
		contentPane.add(btnOverall);

		// Go back button action listener event
		JButton btnGoBack = new JButton("Go Back");
		btnGoBack.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				firstEvaluationPage.entireEval = false;
				firstEvaluationPage.safetyEval = false;
				firstEvaluationPage.vulnerableEval = false;
				contentPane.setVisible(false);
				setVisible(false);
				firstEvaluationPage firstFrameGoBack = new firstEvaluationPage();
				firstFrameGoBack.setVisible(true);

			}
		});
		btnGoBack.setBounds(403, 543, 80, 29);
		contentPane.add(btnGoBack);

		// Exit action listener event
		JButton btnExit = new JButton("EXIT");
		btnExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});
		btnExit.setBounds(495, 543, 68, 29);
		contentPane.add(btnExit);

		JLabel lblNewLabel = new JLabel("");
		Image third = new ImageIcon(this.getClass().getResource(
				"/vulnerability.png")).getImage();

		lblNewLabel.setIcon(new ImageIcon(third));

		lblNewLabel.setBounds(37, 66, 526, 215);
		contentPane.add(lblNewLabel);
	}

	/*
	 * Function to check the users ports to see if any 
	 * of them are open and are not being used by
	 * verified applications.
	 * 
	 * returns: int: Score 
	 */
	protected int evaluatePorts() {
		Process p;
		String command = "netstat -ap tcp";
		int score = 0;
		int openPort = 0;
		int totalPort = 0;

		try {
			// execute the command on terminal
			Process proc = Runtime.getRuntime().exec(command);
			InputStream istr = proc.getInputStream();
			BufferedReader br = new BufferedReader(new InputStreamReader(istr));
			String str;
			// check the output of the executed command and 
			// match with the different possible status of the
			// system
			while ((str = br.readLine()) != null) {
				if (str.startsWith("tcp")) {
					String[] s = str.split("\\s+");
					totalPort += 1;
					if (s[5].equals("LISTEN")) {
						openPort += 1;
					}
				}
			}
			int resultCode = proc.waitFor();
			br.close();

			// Check the percentage of open and unused ports
			// and calculate the score based on it.
			double count = (openPort * 100) / totalPort;
			if (count >= 90.0) {
				score += 0;
			} else if (count >= 80) {
				score += 1;
			} else if (count >= 70) {
				score += 2;
			} else if (count >= 60) {
				score += 3;
			} else if (count >= 50) {
				score += 4;
			} else if (count >= 40) {
				score += 5;
			} else if (count >= 30) {
				score += 6;
			} else if (count >= 20) {
				score += 7;
			} else if (count >= 10) {
				score += 8;
			} else if (count >= 3) {
				score += 9;
			} else if (count == 0) {
				score += 10;
			}
		} catch (Exception e) {
			System.out.println("Exception occurred during Port evaluation");
		}

		return score;
	}

	/*
	 * Function to check users wifi connections to see if they 
	 * are secured by any encryption or open.
	 * 
	 * returns: int: Score 
	 */
	protected int evaluateWIFI() {
		Process p;
		String command = "system_profiler SPAirPortDataType";
		int score = 0;
		int openWIFI = 0;
		int totalWIFI = 0;

		try {
			// execute the command on terminal
			Process proc = Runtime.getRuntime().exec(command);
			InputStream istr = proc.getInputStream();
			BufferedReader br = new BufferedReader(new InputStreamReader(istr));
			String str;
			// check the output of the executed command and 
			// match with the different possible status of the
			// system
			while ((str = br.readLine()) != null) {

				if (str.startsWith("              Security: NONE")) {
					openWIFI += 1;
				} else if (str.startsWith("              Security:")) {
					totalWIFI += 1;
				}

			}
			int resultCode = proc.waitFor();
			br.close();

			// Check the percentage open wifi connections
			// and calculate the score based on it.
			double count = (openWIFI * 100) / totalWIFI;
			if (count >= 90.0) {
				score += 0;
			} else if (count >= 80) {
				score += 1;
			} else if (count >= 70) {
				score += 2;
			} else if (count >= 60) {
				score += 3;
			} else if (count >= 50) {
				score += 4;
			} else if (count >= 40) {
				score += 5;
			} else if (count >= 30) {
				score += 6;
			} else if (count >= 20) {
				score += 7;
			} else if (count >= 10) {
				score += 8;
			} else if (count >= 3) {
				score += 9;
			} else if (count == 0) {
				score += 10;
			}
		} catch (Exception e) {
			System.out.println("Exception occurred during WIFI evaluation");
		}

		return score;
	}

	/*
	 * Function to check if the applications installed by the user are
	 * signed by Apples verified Developers.
	 * 
	 * returns: int: Score 
	 */
	protected int evaluateInstalledApplications() {

		String command = "system_profiler SPApplicationsDataType | grep \"Obtained from:\"";
		int score = 0;
		int uSource = 0;
		int tApps = 0;
		try {
			// execute the command on terminal
			Process proc = Runtime.getRuntime().exec(command);
			InputStream istr = proc.getInputStream();
			BufferedReader br = new BufferedReader(new InputStreamReader(istr));
			String str;
			// check the output of the executed command and 
			// match with the different possible status of the
			// system
			while ((str = br.readLine()) != null) {
				if (str.startsWith("      Obtained from: Unknown")) {
					uSource += 1;
				}
				if (str.startsWith("      Obtained from")) {
					tApps += 1;
				}
			}
			int resultCode = proc.waitFor();
			br.close();
			// Check the percentage of apps not Apple verified
			// and calculate the score based on it.
			double count = (uSource * 100) / tApps;
			if (count >= 90.0) {
				score += 0;
			} else if (count >= 80) {
				score += 1;
			} else if (count >= 70) {
				score += 2;
			} else if (count >= 60) {
				score += 3;
			} else if (count >= 50) {
				score += 4;
			} else if (count >= 40) {
				score += 5;
			} else if (count >= 30) {
				score += 6;
			} else if (count >= 20) {
				score += 7;
			} else if (count >= 10) {
				score += 8;
			} else if (count >= 3) {
				score += 9;
			} else if (count == 0) {
				score += 10;
			}
		} catch (Exception e) {
			System.out
					.println("Exception occurred during installed applications evaluation");
		}
		return score;
	}

	/*
	 * Function to check if the users FileVault system is enabled or not.
	 * If enabled then what is the status of encryption of the user
	 * 
	 * returns: int: Score 
	 */
	protected int evaluateEncryption() {
		Process p;
		String command = "diskutil cs list";
		int score = 0;

		try {
			// execute the command on terminal
			p = Runtime.getRuntime().exec(command);
			p.waitFor();
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					p.getInputStream()));

			String line = "";
			// check the output of the executed command and 
			// match with the different possible status of the
			// system
			while ((line = reader.readLine()) != null) {

				if (line.startsWith("        Encryption Status:       Unlocked")) {
					score += 1;
				} else if (line
						.startsWith("        Encryption Status:       Locked")) {
					score += 2;
				} else if (line
						.startsWith("        Conversion Status:       Complete")) {
					score += 2;
				} else if (line
						.startsWith("        Conversion Status:       Converting")) {
					score += 1;
				} else if (line
						.startsWith("        Has Encrypted Extents:   Yes")) {
					score += 1;
				} else if (line
						.startsWith("        Fully Secure:            Yes")) {
					score += 2;
				} else if (line
						.startsWith("        Passphrase Required:     Yes")) {
					score += 1;
				} else if (line
						.startsWith("            Revertible:            Yes")) {
					score += 1;
				} else if (line
						.startsWith("        Fully Secure:            No")) {
					score -= 2;
				} else if (line
						.startsWith("        Passphrase Required:     No")) {
					score -= 1;
				}
			}
			
			//execute command on terminal
			String command1 = "fdesetup status";
			p = Runtime.getRuntime().exec(command1);
			p.waitFor();
			BufferedReader reader1 = new BufferedReader(new InputStreamReader(
					p.getInputStream()));

			String line1 = "";
			// check the output of the command
			// match with the different possible status of the
			// system
			while ((line1 = reader1.readLine()) != null) {

				if (line1.startsWith("FileVault is On")) {
					score += 1;
					FileVaultOn = true;
				} else {
					score -= 1;
				}
			}
		} catch (Exception e) {
			System.out
					.println("Exception occurred during Encryption of data evaluation");
		}
		return (score < 0) ? 0 : score;
	}
}
